name: 'Validate module'
description: 'Validate module'

inputs:
  templateFilePath:
    description: 'The path to the template file to use for testing & deployment'
    required: true
  parameterFilePath:
    description: 'The path to the parameter file to use for testing & deployment'
    required: true
  location:
    description: 'The location to use for deployment'
    required: true
  resourceGroupName:
    description: 'The resource group to deploy to'
    required: false
  subscriptionId:
    description: 'The subscriptionId to deploy to'
    required: false
  managementGroupId:
    description: 'The managementGroupId to deploy to'
    required: false

runs:
  using: 'composite'
  steps:
    - name: 'Setup agent'
      shell: pwsh
      run: |
        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

        # Set agent up
        Set-EnvironmentOnAgent

    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: 'Replace Parameter File Tokens [${{ inputs.parameterFilePath }}] '
      shell: pwsh
      run: |
        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInParameterFile.ps1')

        # Load Settings File
        $Settings = Get-Content -Path "settings.json" | ConvertFrom-Json
        # Initialize Default Parameter File Tokens
        $DefaultParameterFileTokens = @(
            @{ Name = 'resourceGroupName'; Value = '${{ inputs.resourceGroupName }}' }
            @{ Name = 'subscriptionId'; Value = '${{ inputs.subscriptionId }}' }
            @{ Name = 'managementGroupId'; Value = '${{ inputs.managementGroupId }}' }
            @{ Name = "tenantId"; Value = '${{ env.ARM_TENANT_ID }}' }
            @{ Name = "deploymentSpId"; Value = '${{ env.DEPLOYMENT_SP_ID }}' }
        ) | ForEach-Object { [PSCustomObject]$PSItem }

        # Construct Token Function Input
        $ConvertTokensInputs = @{
            ParameterFilePath                 = '${{ inputs.parameterFilePath }}'
            DefaultParameterFileTokens        = $DefaultParameterFileTokens
            LocalCustomParameterFileTokens    = $Settings.parameterFileTokens.localTokens.tokens
            TokenPrefix                       = $Settings.parameterFileTokens.tokenPrefix
            TokenSuffix                       = $Settings.parameterFileTokens.tokenSuffix
        }
        # Invoke Token Replacement Functionality
        $null = Convert-TokensInParameterFile @ConvertTokensInputs -Verbose
      # [Test Deployment] task(s)
      #--------------------------
    - name: 'Validate [${{ inputs.templateFilePath }}]'
      shell: pwsh
      run: |
        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourceValidation' 'Test-TemplateWithParameterFile.ps1')

        # ----------- #
        # INVOKE TEST #
        # ----------- #
        $functionInput = @{
          templateFilePath   = '${{ inputs.templateFilePath }}'
          parameterFilePath  = '${{ inputs.parameterFilePath }}'
          location           = '${{ inputs.location }}'
          resourceGroupName  = '${{ inputs.resourceGroupName }}'
          subscriptionId     = '${{ inputs.subscriptionId }}'
          managementGroupId  = '${{ inputs.managementGroupId }}'
        }

        Write-Verbose "Invoke task with" -Verbose
        Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

        Test-TemplateWithParameterFile @functionInput -Verbose
